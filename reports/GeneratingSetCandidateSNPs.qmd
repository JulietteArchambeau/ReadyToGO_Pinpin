---
title: "Identifying a set of candidate SNPs"
author: "Juliette Archambeau & Adélaïde Theraroz"
date: "`r format(Sys.time(), '%d %B, %Y')`"
number-sections: true
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>


```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 4,fig.height = 4,cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(tidyverse)  # CRAN v1.3.0
library(readxl)     # CRAN v1.3.1
library(xtable)
library(reshape2)
library(kableExtra)
library(here)
library(cowplot)
library(ggVennDiagram)


# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```


```{r MakeVennDiagrams}
# function to make the Venn diagrams
make_venndiagram <- function(list_candidates,
                             caption="",
                             label = "both",
                             title=""){

list_candidates %>% 
    ggVennDiagram(lty="solid", size=0.2, label = label) + 
  scale_fill_gradient2(low = "white", high = 'gray40') + 
  scale_color_manual(values = rep("gray80",6)) + 
  guides(fill = "none") + 
  labs(caption=caption) +
  ggtitle(title) +
  theme(text = element_text(size=16),
        plot.caption = element_text(hjust=0.5, size=rel(1.2))) + 
  scale_x_continuous(expand = expansion(mult = .2))
}
```


# GEA methods

Candidate SNPs were identified using different gene-environment association (GEA) methods, which we summarize below.

## Redundancy analysis (RDA)

Two RDA models were fitted:

  - not accounting for population structure, which we will call *<span style="color: orange;">RDA</span>*.
  
  - accounting for population structure by incorporating in the RDA model the three first PCs of the PCA performed on the genomic dataset (not filtered for minor allele frequencies), which we will call *<span style="color: orange;">pRDA</span>*.


In this document, we only use RDA candidates that have been identified based on their *extremeness* along a *distribution of Mahalanobis distances* estimated between each locus and the center of the RDA space using a $K$ number of axes (we used $K=2$). This method was used in @capblancq2020climate (see [code](https://github.com/Capblancq/Local-Adaptation-Fagus-sylvatica)) and @capblancq2021redundancy ([code](https://github.com/Capblancq/RDA-landscape-genomics)). For that, (1) the Mahalanobis distances were calculated, (2) $p$-values and $q$-values were obtained with the `radapt` function from @capblancq2021redundancy, and (3) a FDR (False Discovery Rate) threshold of 5% was applied to the $q$-values to identify the outliers.

 
```{r RDAoutliers, fig.width=12,fig.height=5}
par(mfrow=c(1,2))

rda_outliers <- readRDS(here::here("outputs/RDA/RDA_outliers.rds"))

list_candidates <- list("RDA"=rda_outliers[[1]]$outliers %>% dplyr::filter(maha_meth==T) %>% pull(snp),
                        "pRDA"=rda_outliers[[2]]$outliers %>% dplyr::filter(maha_meth==T) %>% pull(snp))



make_venndiagram(list_candidates[c("RDA","pRDA")])
```


## Gradient forest (GF)


Following @fitzpatrick2021experimental and @capblancq2023common, GF models were fitted using the 'raw' or *uncorrected* allele frequencies.
  
Threshold: **we use the 0.5% SNPs with the lowest empirical $p$-values.**


```{r GFoutliers, fig.width=12,fig.height=5}
list_candidates$"GF"=readRDS(here::here("outputs/GF/gf_outliers.rds"))$outliers_rank005
```

<span style="color: OrangeRed;">`r length(list_candidates$GF)` candidate SNPs</span> were identified with the GF approach.


## Latent factor mixed model (LFMM)

We identified the candidate SNPs by applying a FDR threshold of 5% to the p-values from a LFMM. LFMM was corrected for population structure (ie population relatedness) as the population structure should be captured by the $K$ latent factors ($K = 5$ in our case).

```{r LFMMoutliers}
list_candidates$"LFMM" <- readRDS(here::here("outputs/LFMM/candidates.rds"))
```

<span style="color: OrangeRed;">`r length(list_candidates$LFMM)` candidate SNPs</span> were identified with the LFMM approach.


## BayPass


```{r BayPassOutliers}
list_candidates$"BayPass" <- readRDS(here("outputs/BayPass/baypass_outliers.rds"))
```

<span style="color: OrangeRed;">`r length(list_candidates$BayPass)` candidate SNPs</span> were identified with <span style="font-variant:small-caps;">BayPass</span>. SNPs were considered as outliers in BayPass when their Bayes factors were higher than 10.



# Common candidate SNPs

Let's look at the common candidates across the different GEA methods. 

```{r VennDiagramCommoncandidates,fig.height=5,fig.width=8}
# generating the Venn diagrams showing common candidates across GEA methods
make_venndiagram(list_candidates[c("RDA","GF")],
                 caption = "GEA methods not correcting for population structure",label="count")
make_venndiagram(list_candidates[c("pRDA","LFMM","BayPass")],
                 caption = "GEA methods correcting for population structure",label="count")
make_venndiagram(list_candidates[c("RDA","GF","pRDA","LFMM","BayPass")],
                 caption = "All GEA methods", label="count")
```

```{r CommonSNPs}
common_snps <- list_candidates %>% unlist() %>% .[duplicated(.)] %>% unique()
```

<span style="color: red;">We select the SNPs identified by at least two methods, which corresponds to `r common_snps %>% length()` SNPs.</span>


# Genome position of candidate SNPs

```{r LoadGenomePositionData}
snppos <- read_excel(here("data/genomic_data/genome_position.xlsx"), sheet = "base_table") %>% 
  dplyr::rename(snp_ID = Juliette_snp_ID,
                original_ID = Original_ID,
                affx_ID = affy_snp_id,
                infinium_ID = Infinium_ID,
                genome_position =`position (bp)`,
                annotation =`Annotation (including alternative names)`) %>% 
  dplyr::select(snp_ID, original_ID, affx_ID, infinium_ID, scaffold, genome_position, annotation)
```

Information on genome position for the candidates SNPs:

```{r GenomePositionCandidates}
snppos %>% 
  dplyr::filter(affx_ID %in% common_snps) %>% 
  kable_mydf(boldfirstcolumn = F, font_size = 11)
```

SNPs on the same scaffold:

```{r SNPsSameScaffold}
snppos %>% 
  dplyr::filter(affx_ID %in% common_snps) %>% 
  group_by(scaffold) %>% 
  filter(n()>1) %>% 
  kable_mydf(boldfirstcolumn = F, font_size = 11)
```

**Comment:** a scaffold is a set of contigs separated by gaps and for which the relative orientation and distance is known.

  
When some SNPs are on the same scaffold, we remove the SNPs with higher $p$-values in the RDA.

```{r rmSNPsSameGenomePosition}
snp_to_remove <-  snppos %>% 
  dplyr::filter(affx_ID %in% common_snps) %>% 
  group_by(scaffold) %>% 
  filter(n()>1) %>% 
  group_split() %>% 
  lapply(function(x){

rda_outliers[[1]]$GSout %>% 
   filter(snp %in% x$affx_ID) %>% 
   arrange(pvalues) %>%  
   slice(2:nrow(x)) %>% 
   pull(snp)
      }) %>%  
  unlist

common_snps <- setdiff(common_snps, snp_to_remove)
```

<span style="color: red;">After keeping only one candidate SNPs per scaffold, we get `r length(common_snps)` candidate SNPs.</span>

```{r SaveCandidateSNPs}
common_snps %>% saveRDS(here("outputs/candidate_snps.rds"))
```

