---
title: "Formatting and cleaning the genomic data"
author: "Juliette Archambeau & Adélaïde Theraroz"
date: "`r format(Sys.time(), '%d %B, %Y')`"
number-sections: true
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(dev.args = list(png = list(type = "cairo")))
knitr::opts_chunk$set(fig.width = 7,fig.height = 5,cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(tidyverse)  # CRAN v1.3.0
library(readxl)     # CRAN v1.3.1
library(xtable)
library(reshape2)
library(kableExtra)
library(magrittr)
library(cowplot)
library(rnaturalearth)
library(raster)
library(RColorBrewer)
library(here)
library(latex2exp)
library(adegenet)
library(janitor)
library(parallel)

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```

# Generating table of minor allele counts

## Importing the genepop file

The genomic data are in `genepop` format. We load them and convert them to `genind` format using the `adegenet` R package.

```{r LoadGenomicData, message=F, eval=T, results="hide"}
genepop_file <- read.genepop(here("data/genomic_data/POPGEN_FILTERED_Affx_GLOBAL.gen"))
```


For the GEA analyses and the genomic offset estimation, we are going to consider the individuals from the MAU and MAUbis populations as two distinct populations, and we we rename the MAUbis population to MAB:


```{r ReplaceMAUbisToMAB}
geno <- as.data.frame(genepop_file@tab)
rownames(geno) <- geno %>% row.names() %>% str_replace("MAUbis","MAB")
```

In the `genind` object, allele counts can be extracted with `@tab`. In the `genind` object, allele counts are specified for all alleles at a given locus (i.e. one column per allele). 

```{r NbIndividualsAndPOpulations}
tab <- tibble(ind = row.names(geno),
              pop = str_sub(ind,1,3)) %>% 
  arrange(pop)

n_pops <- tab %>% group_by(pop) %>% summarise(nb_ind_genepop=n())
```

The `genepop` dataset contains `r nrow(tab)` and `r nrow(n_pops)`.

The COM population has only `r n_pops$nb_ind_genepop[n_pops$pop =="COM"]` individuals.

```{r RemoveCOMpopulation, eval=F}
# In case we want to remove the COM population, run:
geno <- geno %>% filter(!str_sub(rownames(geno),1,3)=="COM")
```


## Removing the monomorphic SNPs

We first remove the **monomorphic SNPs**, i.e. SNPs that have only one allele.

```{r IdentifyingMonomorphicSNPs}
# Transform to allele counts with individuals in columns and alleles in rows
df <- geno %>%  
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column("snp") %>% 
  mutate(snp=str_sub(snp,1,-4))

# Identifying duplicates, i.e. SNPs with different alleles
dup <- df$snp[(duplicated(df$snp))]

# Subseting monomorphic SNPs
mono <- df %>% filter(! snp %in% dup)

# Run the line below to check that the SNPs are really monomorphic (.i.e. they have one unique value)
# apply(test[,-1],1,function(x) n_distinct(x,na.rm=T))
```

There are `r nrow(mono)` monomorphic SNPs. We remove them:

```{r RemovingMonomorphicSNPs}
df <- df %>% filter(!snp %in% mono$snp)
```

`r nrow(df)` left after removing the monomorphic SNPs.

## Transforming the table to minor allele counts

Then, we build a dataset with one row per locus, with only the counts of the minor allele (i.e. 0, 1, 2 or NA):

```{r CalculateAlleleCounts, eval=F}
df <- df %>%   group_by(snp) %>% 
  group_split() %>% 
  map_dfr(function(x){
   x %>% 
      mutate(MAC = rowSums(across(where(is.numeric)), na.rm=T)) %>% 
      filter(MAC==min(MAC)) %>% 
      `if`(nrow(.)>1 , slice(.,1), .) %>% # some loci have the same number of MAC, so we have to select only one allele as the minor allele
      dplyr::select(-MAC)
    }) 

df %>% saveRDS(file=here("data/genomic_data/raw_allele_counts.rds"))
```


```{r LoadRawAlleleCounts}
df <- readRDS(file=here("data/genomic_data/raw_allele_counts.rds"))
df[1:10,1:10] %>%  kable_mydf()
```

# Filtering

## Minor allele counts

We calculate for each SNPs the sum of the minor allele counts. 

```{r MAC}
sum_minor_allele <- df %>% 
  column_to_rownames("snp") %>% 
  t() %>% 
  as_tibble() %>% 
  sapply(function(x) sum(x,na.rm=T)) %>% 
  as.data.frame() %>%
  set_colnames(c("sum")) %>% 
  rownames_to_column(var = "snp") %>% 
  as_tibble() 

low_mac <- sum_minor_allele %>% filter(sum %in% c(1,2))
```

The sum of the minor allele counts should be higher than 1 (i.e. we removed the monomorphic SNPs) and lower than the total number of individuals (N=`r ncol(df)-1`). We check that:

```{r RangeMinorAlleleCounts}
range(sum_minor_allele$sum)
```

The sum of the minor allele counts is equal to one or two for `r nrow(low_mac)` SNPs. <span style="color: orange;"> We remove these SNPs because their very low minor allele counts may be due to PCR or sequencing errors.</span>

```{r RemovingLowMACSNPs}
# we remove the SNPs that one or two minor allele count
df <- df %>% filter(!snp %in% low_mac$snp)
```

<span style="color: orange;">There are `r nrow(df)` non-monomorphic SNPs left.</span>


## Missing data per individual

We then check the number of missing data per individual.

```{r MissingDataPerIndividual, warning=F, fig.height=4,fig.width=6}
tab <- df %>% 
  column_to_rownames("snp") %>% 
  as_tibble() %>% 
  sapply(function(x) sum(is.na(x))*100/nrow(df)) %>% 
  as.data.frame() %>%
  set_colnames(c("na_freq")) %>% 
  rownames_to_column(var = "individual") %>% 
  as_tibble() %>% 
  arrange(na_freq) %>% 
  mutate(id=1:nrow(.))

plot(tab$id,tab$na_freq,
     pch=20,
     xlab="Individual number",
     ylab="Percentage of missing data per individual")
```

Possible thresholds for the number of missing values per individual:

  - `r nrow(tab[tab$na_freq<20,])` individuals have less than 20% missing data
  - `r nrow(tab[tab$na_freq<18,])` individuals have less than 18% missing data
  - `r nrow(tab[tab$na_freq<15,])` have less than 15% missing data.
  

```{r RemoveindividualMissingData}
# Specifying the chosen threshold:
threshold_NA_per_individual <- 18

# Removing individuals with more than 18% missing data
df <- df %>% dplyr::select(snp, tab[tab$na_freq<threshold_NA_per_individual,]$individual)
```

<span style="color: orange;">We keep the `r ncol(df)-1` individuals that have less than `r threshold_NA_per_individual`% missing data.</span>

# Minor allele frequencies

We want to remove *minor allele frequencies* (MAF) for gene-environment association analyses, but not for population genetic structure estimation. 

Therefore, we produce two datasets: one with MAF and the other without (i.e. we remove MAF < 1%), that we store in a list.


```{r MAF, warning=F, fig.height=4,fig.width=6}
tab <- df %>% 
  column_to_rownames("snp") %>% 
  t() %>% 
  as_tibble() %>% 
  sapply(function(x) sum(x,na.rm=T)*100/(2*nrow(.))) %>% 
  as.data.frame() %>%
  set_colnames(c("MAF")) %>% 
  rownames_to_column(var = "snp") %>% 
  as_tibble() %>% 
  arrange(MAF) %>% 
  mutate(id=1:nrow(.))

plot(tab$id,tab$MAF,
     pch=20,
     xlab="SNP number",
     ylab="Minor allele frequencies")
```


```{r RmMissingDataMAF}
list_geno <- list(list_withmaf=list(df = df),
                  list_withoutmaf=list(df = df %>% filter(!snp %in% tab[tab$MAF<1,]$snp)))

```

<span style="color: orange;">In the dataset without MAF, we remove the `r nrow(tab[tab$MAF<1,])` SNPs that have MAF < 1%: `r nrow(list_geno$list_withoutmaf$df)` SNPs left.</span>


# Missing data per SNP

We then look at the number of missing data per SNPs:

```{r MissingDataPerSNP, warning=F}
remove_NA_perSNP <- function(x){
  
tab <- x$df %>%
  column_to_rownames("snp") %>% 
  t() %>% 
  as_tibble() %>% 
  sapply(function(x) sum(is.na(x))*100/nrow(.)) %>% 
  as.data.frame() %>%
  set_colnames(c("na_freq")) %>% 
  rownames_to_column(var = "snp") %>% 
  as_tibble() %>% 
  arrange(na_freq) %>% 
  mutate(id=1:nrow(.))


df <- x$df %>% filter(snp %in% tab[tab$na_freq<20,]$snp)

list(df=df,tab=tab)
}

list_geno <- lapply(list_geno,remove_NA_perSNP)
```

```{r PlotMissingDataPerSNP, fig.height=4,fig.width=6}
plot(list_geno$list_withoutmaf$tab$id,list_geno$list_withoutmaf$tab$na_freq,
     pch=20,
     xlab="SNP number",
     ylab="Percentage of missing data per SNP",
     main="Genomic dataset without MAF")
```


In the dataset without MAF, `r nrow(list_geno$list_withoutmaf$tab[list_geno$list_withoutmaf$tab$na_freq<20,])` SNPs have less than 20% missing data and `r nrow(list_geno$list_withoutmaf$tab[list_geno$list_withoutmaf$tab$na_freq<15,])` have less than 15% missing data.

<span style="color: orange;">We keep SNPs with less than 20% missing data. So, the two datasets contain `r ncol(list_geno$list_withoutmaf$df)-1` individuals and there are `r nrow(list_geno$list_withoutmaf$df)` SNPs left in the dataset without MAF and `r nrow(list_geno$list_withmaf$df)` in the dataset with MAF.</span>

# Exporting

##  Allele counts (i.e. 0/1/2)


```{r ExportingFilteredAlleleCounts}
for(i in 1:length(list_geno)){
  specMAF <- names(list_geno[i])[1] %>% str_sub(6, -1)
  
  list_geno[[i]]$df %>% 
    dplyr::select(snp,sort(colnames(.[,-1]))) %>% # sort columns (i.e. individuals) by alphabetical order
    write_csv(here(paste0("data/genomic_data/filtered_allele_counts_",specMAF,".csv")),
            append=FALSE)
}

# Reminder
# to download the dataset with snp_ID as first column: use `read.csv` with missing row.names
# to download the dataset with snp_ID as row names: use `read.csv` with row.names = 1
```

`r sum(is.na(list_geno$list_withmaf$df))` missing data in the dataset with MAF, and `r sum(is.na(list_geno$list_withoutmaf$df))` missing data in the dataset without MAF.

##  Allele frequencies


```{r ExportingFilteredAllelefrequencies}
# Only useful for the dataset without MAF

compute_allele_freq <- function(x){
  
x %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var="pop") %>% 
  mutate(pop=str_sub(pop,1,3)) %>% 
  group_by(pop) %>% 
  summarise_all(~sum(., na.rm = TRUE)/((n()-sum(is.na(.)))*2))
  
}

df_freq <- list_geno$list_withoutmaf$df %>% 
  column_to_rownames("snp") %>% 
  compute_allele_freq() 

df_freq %>% 
  write_csv(here(paste0("data/genomic_data/filtered_allele_frequencies_withoutmaf.csv")),
            append=FALSE)

df_freq[1:10,1:8] %>% 
  mutate(across(where(is.numeric), round, 2)) %>% 
  kable_mydf(boldfirstcolumn = T, font_size = 12)
```

`r sum(is.na(df_freq))` missing data in this dataset.


# Imputation of missing data

We have to impute missing values to run the gene-environment association analyses.

For that, we impute the missing values based on the most common alleles in the main gene pool of the individual.

```{r PropAssignementSTRUCTURE}
gp <- read_csv(here("data/genomic_data/K10_indiv_Juliette.csv"), show_col_types = FALSE) %>% 
  arrange(Individual) %>% 
  mutate(Individual = Individual %>% str_replace("MAUbis","MAB"))
  

gp <- gp %>% dplyr::select(contains("K")) %>%  apply(MARGIN=1, function(x){
  
 K_names <- gp %>%  dplyr::select(contains("K")) %>% names()
 
 tibble(K_max = max(x),
        K_main = K_names[which.max(x)])
}) %>% 
  bind_rows() %>% 
  bind_cols(gp,.)
```


```{r FormatingGenomicDataBeforeImputation}
list_geno <- mclapply(list_geno, function(x){
  
df <-  x$df %>% 
  column_to_rownames("snp") %>%
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column("Individual") %>%  
  left_join(gp[,c("Individual","K_main")],by="Individual") %>% 
  dplyr::select(Individual,K_main,everything())

list(df=df)
  
})
```

```{r CheckingImputation1}
# We can check that the imputation worked fine

subset <- list_geno$list_withoutmaf$df[list_geno$list_withoutmaf$df$K_main=="K4",]
set.seed(12)
vec_snps_with_nas <- sample(colnames(subset)[colSums(is.na(subset)) > 0],10,replace=F) #extract some SNPs with NAs

subset_df <- lapply(vec_snps_with_nas, function(x){
  subset %>% 
  tabyl(any_of(x)) %>% 
  dplyr::select(1:2) %>% 
  set_colnames(c("genotype","count")) %>%  
  pivot_wider(names_from = "genotype", values_from = "count") %>%
  mutate(expected_value_after_imp=colnames(.)[which.max(across(everything(.)))],snp = x)
}) %>% 
  bind_rows() %>% 
  dplyr::rename(nb_0_bf_imp = `0`,
                nb_1_bf_imp = `1`,
                nb_2_bf_imp = `2`,
                nb_NA_bf_imp = `NA`)
```

We impute the missing values:

```{r NAsImputation}
# Replace NAs by (1) subseting by GP, (2) imputing NAs, (3) reassembling the GP.
list_geno <- mclapply(list_geno, function(x){
 
for(i in unique(x$df$K_main)){
  subset <- x$df[x$df$K_main==i,]
  subset <- apply(subset[,3:ncol(subset)], 2, function(x) replace(x, is.na(x), as.numeric(names(which.max(table(x))))))
  x$df[x$df$K_main==i,3:ncol(x$df)] <- subset
}
  
list(df=x$df)
  
})
```

For the imputation of missing values, another option would be to use the function `impute` of the `LEA` R package to do the imputation: it uses ancestry and genotype frequency information (estimated with the `snmf` function, which estimates admixture coefficients) to do the imputation.

We can check that the imputation worked well:

```{r CheckingImputation2}
# If we want to check that the imputation worked fine
  # Look at the SNPs that had NAs before imputation
subset <- list_geno$list_withoutmaf$df[list_geno$list_withoutmaf$df$K_main=="K4",]
subset_df_2 <- lapply(vec_snps_with_nas, function(x){
  subset %>% 
  tabyl(any_of(x)) %>% 
  dplyr::select(1:2) %>% 
  set_colnames(c("genotype","count")) %>%  
  pivot_wider(names_from = "genotype", values_from = "count") %>%
  mutate(snp = x)
}) %>% 
  bind_rows() %>% 
  dplyr::rename(nb_0_after_imp = `0`,
                nb_1_after_imp = `1`,
                nb_2_after_imp = `2`) %>% 
  left_join(subset_df, by="snp") %>% 
  dplyr::select(snp, contains("bf_imp"),expected_value_after_imp, everything())


subset_df_2  %>% kable_mydf(boldfirstcolumn = F, font_size = 11)
```

The imputation worked well :)

```{r FormattingGenomicDataPreSaving}
list_geno <- mclapply(list_geno, function(x){
  
x$df <- x$df %>% 
  arrange(Individual) %>% 
  column_to_rownames(var="Individual") %>% 
  dplyr::select(-K_main) %>% 
  t() %>% 
  as.data.frame()

list(df=x$df)
})


# Visualization:
list_geno$list_withoutmaf$df[1:10,1:10]  %>% kable_mydf(boldfirstcolumn = T, font_size = 11)
```


# Exporting the genomic data


## Individual-level allele counts

To run BayPass and LFMM, genomic data have to be allele counts at the individual level, so below we export the allele counts:

```{r ExportImputedGenomicDataAlleleCounts}
for(i in 1:length(list_geno)){
  specMAF <- names(list_geno[i])[1] %>% str_sub(6, -1)
  
  list_geno[[i]]$df %>%
    rownames_to_column(var="snp_ID") %>% 
    write_csv(here(paste0("data/genomic_data/imputed_allele_counts_",specMAF,".csv")),
            append=FALSE)
}
```


## Population allele frequencies

To run the RDA and GF, the genomic data have to be population allele frequencies.

```{r ExportImputedGenomicDataAllelefrequencies}
# Calculate allele frequencies
list_geno <- mclapply(list_geno, function(x){

list(df=compute_allele_freq(x$df))

})


# export in csv
for(i in 1:length(list_geno)){
  specMAF <- names(list_geno[i])[1] %>% str_sub(6, -1)
  
  list_geno[[i]]$df %>% 
  write_csv(here(paste0("data/genomic_data/imputed_allele_frequencies_",specMAF,".csv")),
            append=FALSE)
}



list_geno$list_withoutmaf$df[1:10,1:8]  %>% 
  mutate(across(where(is.numeric), round, 2)) %>%
  kable_mydf(boldfirstcolumn = F, font_size = 11)
```


