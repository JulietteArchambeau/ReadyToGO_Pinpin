---
title: "BayPass analyses - Identification of candidate SNPs"
author: "Juliette Archambeau & Adélaïde Theraroz"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 5,fig.height = 4,cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(tidyverse)  # CRAN v1.3.0
library(readxl)     # CRAN v1.3.1
library(xtable)
library(reshape2)
library(kableExtra)
library(here)
library(parallel)
library(magrittr)
library(janitor)
library(corrplot)

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))

# Functions from the BayPass software
source(here("scripts/functions/baypass_utils.R"))
```


In this document, we identify candidate SNPs using the **gene-environment association analysis** provided by the **<span style="font-variant:small-caps;">BayPass</span> software**. 


# Load and format data
 
## Genomic data

We use the imputed genomic datasets, in which the imputation of missing data wad done using the most common allele at each SNP within the main gene pool of the individual.

Importantly, we **estimate the population covariance matrix** with the genomic dataset **with minor allele frequencies** (MAF) because MAF can be important to estimate the population genetic structure.

Then we **identify the candidate SNPs** with a genomic dataset **without MAF**. 

The genomic data for <span style="font-variant:small-caps;">BayPass</span> needs to be allele counts for each SNP in each of the population and has to be stored in a `.txt` file.

```{r LoadGenomicData, eval=F}
# Function to count the second allele
count_2nd_allele <- function(x) {2*length(x)-sum(x)}

# We generate the genomic data in BayPass format
lapply(c("withoutmaf","withmaf"), function(x){
  
geno <- read.csv(here(paste0("data/genomic_data/imputed_allele_counts_",x,".csv")),
                          row.names = 1) %>% 
  t() %>% 
  as.data.frame() %>% 
  mutate(pop=str_sub(row.names(.),1,3)) %>% 
  dplyr::select(pop,everything()) %>% 
  group_by(pop) %>% 
  dplyr::summarize_all(.funs=c('sum', 'count_2nd_allele')) %>% # calculate allele counts per population
  arrange(pop) # to be sure that climatic data and genomic data are in the same order

# Counts of the minor allele
dfsum1  <- geno %>% 
  column_to_rownames(var="pop") %>% 
  dplyr::select(contains("sum")) %>%  
  t() 

# counts of the major allele
dfsum2  <- geno %>% 
  column_to_rownames(var="pop") %>% 
  dplyr::select(contains("count")) %>%  
  t() 

colnames(dfsum1) <- paste0(geno$pop,"1")
colnames(dfsum2) <- paste0(geno$pop,"2")

rownames(dfsum1) <- str_sub(rownames(dfsum1),1,-5)
rownames(dfsum2) <- str_sub(rownames(dfsum2),1,-18)

# identical(rownames(dfsum1), rownames(dfsum2)) # to check that the rownames (SNP names) are the same and in the same order

cbind(dfsum1,dfsum2) %>% 
  as_tibble %>% 
  dplyr::select(sort(tidyselect::peek_vars())) %>% 

# We save the files in the format required by BayPass
write.table(file = here(paste0("data/baypass/genomic_data_input_baypass_",x,".txt")), 
            sep = " ",
            row.names = FALSE, 
            col.names = FALSE) # works either with .txt or no extension
  
})
```



## Climatic data


We load the population-specific climatic information for the climatic variables of interest.

```{r LoadClimaticData}
# set of climatic variables that we are going to use
clim_var <- c("bio1","bio12","bio15","bio3","bio4","SHM")

# loading climatic data and mean-standardizing them
clim_ref <- readRDS(here("data/climatic_data/reference_climate_population_locations.rds")) %>% 
  dplyr::mutate(across(where(is.numeric), ~ (. - mean(.)) / sd(.))) %>% 
  arrange(pop) # to be sure that climatic data and genomic data are in the same order
```

We export the climatic data in the format required for BayPass.

```{r EnvVariableInBayPassFormat, eval=F}
# We save one table per covariate
for(i in c(clim_var)){
  clim_ref %>% 
  dplyr::select(all_of(i)) %>% 
  pull() %>% 
  t() %>% 
  write.table(file = here(paste0("data/baypass/climatic_variables/",i,".txt")), 
              sep = " ",
              row.names = FALSE, 
              col.names = FALSE)
}
```

# Population covariance matrix

## The core model

We estimate the (scaled) covariance matrix of population allele frequencies $\Omega$ resulting from their (possibly unknown and complex) shared history. For that, we use the core model mode of <span style="font-variant:small-caps;">BayPass</span>. According to <span style="font-variant:small-caps;">BayPass</span> manual, 'The core model depicted in Figure 1A might be viewed as a generalization of the model proposed by Nicholson *et al*. (2002) and was first proposed by Coop et al. (2010).' Here is the **Figure 1A from the <span style="font-variant:small-caps;">BayPass</span> manual:**

![](CoreModelBayPass.png)


## Estimation & visualization

<span style="color: red;">We estimate the population covariance matrix using the genomic dataset not filtered for MAF.</span>



```{bash EstimateOmega, eval=F}
# ** Bash script **
# =================

# Working directory: data/baypass/outputs
# First row: directory where Baypass software is

~/Bureau/baypass_2.2/sources/g_baypass \ 
    -gfile ../genomic_data_input_baypass_withmaf.txt \
    -outprefix anacore \
    -seed 44
```


We visualize the matrix.

```{r VisualizeOmega, fig.height=8,fig.width=10, eval=F}
# Upload the estimated Omega matrix
omega <- as.matrix(read.table(here("data/baypass/outputs/anacore_mat_omega.out")))
pop_names <- clim_ref$pop
dimnames(omega)=list(pop_names,pop_names)

# Visualization of the matrix
# Using SVD decomposition
plot.omega(omega=omega,pop.names=pop_names)

# as a correlation plot
cor_mat=cov2cor(omega)
corrplot(cor_mat,method="color",mar=c(2,1,2,2)+0.1,
main=expression("Correlation map based on"~hat(Omega)))

# as a heatmap and hierarchical clustering tree (using the average agglomeration method)
hclust_ave <- function(x) hclust(x, method="average")
heatmap(1-cor_mat,hclustfun = hclust_ave,
main=expression("Heatmap of "~hat(Omega)~"("*d[ij]*"=1-"*rho[ij]*")"))
```


# IS standard covariate model

## Mathematical model

The standard covariate model is represented in the following figure (**Figure 1B from the <span style="font-variant:small-caps;">BayPass</span> the manual**):


![](StandardModelBayPass.png)

From <span style="font-variant:small-caps;">BayPass</span> manual: 

  - 'This model allows evaluating to which extent a population covariable $k$ is (linearly) associated with each marker $i$ (which are assumed independent given $\Omega$) by the introduction of the regression coefficients $\beta_{ik}$ (for convenience the indices $k$ for covariables are dropped in Figure 1B).'


  - 'Importance Sampling (IS) approximation allows estimating Bayes Factor to evaluate the support in favor of association of each SNP $i$ with a covariable $k$, i.e., to compare the model with association ($\beta_{ik} \neq 0$) against the null model ($\beta_{ik} = 0$). The IS based estimation was initially proposed by Coop et al. (2010) and is based on a numerical integration that requires the definition of a grid covering the whole support of the $\beta_{ik}$ prior distribution. In <span style="font-variant:small-caps;">BayPass</span>, the grid consists of $n_{\beta}$ (by default $n_{\beta} = 201$) equidistant points from $\beta_{min}$ to $\beta_{max}$ (including the boundaries) leading to a lag between two successive values equal to $\frac{\beta_{max}-\beta_{min}}{n_{\beta}-1}$ (i.e., 0.003 with default values). Other values for $n_{\beta}$ might be supplied by the user with the `-nbetagrid` option.'


## Running the model

<span style="color: red;">We run the standard covariate model using Important sampling on the genomic dataset filtered for MAF.</span>


```{bash RunStandardCovariateModel, eval=F}
# ** Bash script **
# =================

# Working directory before running the loop: data/baypass/outputs

for var in bio1 bio3 bio4 bio12 bio15 SHM
do
cd ISruns_${var}
for seed in {1..5}
do
~/Bureau/baypass_2.2/sources/g_baypass \
    -gfile ../../genomic_data_input_baypass_withoutmaf.txt \
    -efile ../../climatic_variables/${var}.txt\
    -omegafile ../anacore_mat_omega.out \
    -outprefix anacovis${seed} \
    -seed ${seed}
done
cd ..
done
```

```{r ExtractSummaryOutputs, eval=F}
# Number of iterations
nb_iter <- 5

# extract SNP names
snp_names <- read.csv(here(paste0("data/genomic_data/imputed_allele_counts_withoutmaf.csv")),
                          row.names = 1) %>% 
  rownames()

list_out <- lapply(clim_var, function(var){

# Bayes factors
BF <- lapply(1:nb_iter, function(x){
  read.table(here(paste0("data/baypass/outputs/ISruns_",var,"/anacovis",x,"_summary_betai_reg.out")),
             h=T)$BF.dB.
}) %>% 
  setNames(paste0("BF",1:nb_iter)) %>% 
  as_tibble()

# Regression coefficients Beta_is
beta <- lapply(1:nb_iter, function(x){
  read.table(here(paste0("data/baypass/outputs/ISruns_",var,"/anacovis",x,"_summary_betai_reg.out")),
             h=T)$Beta_is
}) %>% 
  setNames(paste0("beta",1:nb_iter)) %>% 
  as.data.frame()


# Empirical Bayesian P-values eBPis
eBP <- lapply(1:nb_iter, function(x){
  read.table(here(paste0("data/baypass/outputs/ISruns_",var,"/anacovis",x,"_summary_betai_reg.out")),
             h=T)$eBPis
}) %>% 
  setNames(paste0("eBP",1:nb_iter)) %>% 
  as.data.frame()

out <- tibble(snp=snp_names,
              medianBF=apply(BF,1,median),
              medianBeta=apply(beta,1,median),
              medianEBP=apply(eBP,1,median)) %>% 
  mutate(variable=var)

eBP_out <- tibble("eBP_threshold"=c(3),
                  {{var}} :=c(length(which(out$medianEBP>3))))

BF_out <-tibble("BF_threshold" = c(20,10,5),
                {{var}} :=c(length(which(out$medianBF>20)),
                            length(which(out$medianBF>10)),
                            length(which(out$medianBF>5))))

list(snp_out = out,
     BF_out = BF_out,
     eBP_out = eBP_out,
     cor_BF = cor(BF),
     cor_beta = cor(beta),
     cor_eBP = cor(eBP))
}) %>% setNames(clim_var)
```


